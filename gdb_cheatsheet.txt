################################################################
# Coredumps
ulimit -c unlimited                                     # To enable coredump on the system
gdb executable_name core_dump_file                      # starting a crash dump session , use up and down arrows to move in the call stack
################################################################
#GDB
gdb executable                                          # start GDB a process
r                                                       # run the process
attach pid                                              # attach to a process with process id "pid"
b function_symbol_name                                  # to place a breakpoint
n                                                       # for next line
c                                                       # for continue
s                                                       # step into
q                                                       # quit
finish                                                  # go to end of current frame
up                                                      # change to upper stack frame
down                                                    # change to lower stack frame
list                                                    # line_number shows around of where you are
info                                                    # breakpoints to list all break points
backtrace                                               # call stack
info locals                                             # local variables on stack
info args                                               # arguments passed to the function
thread apply all bt                                     # apply to all threads , in this case show backtrace of all
info thread                                             # show all threads including their names
print variable_name                                     # prints variable
disable 2                                               # removes bp with id 2
condition bpid (strstr( buf, "Unknown") == 0x00000000)  # puts a condition on bp with id bpid
shell command                                           # executes a shell command
save breakpoints myfile.txt                             # saving breakpoints , required GDB version is minimum 7.2
################################################################
#GDB Hardware Watchpoints
show can-use-hw-watchpoints                             # show if we can use watchpoints 
info watchpoints                                        # lists hadrware watchpoints ( memory breakpoints )
watch foo                                               # debugger breaks when value of foo changes
rwatch                                                  # read watch
wwatch                                                  # write watch
################################################################
#GDB Automation
source myfile.txt                                       # loads a GDB script
source myfile.py                                        # loads a Python script
gdb -batch -ex 'command1' -ex 'command2' ./debugee      # starts GDB in batch mode and executes 2 commands
gdb --command script.py ./executable.elf                # automate gdb with a python script , requires GDB7
################################################################
# GBB Init
These files contain gdb commands to automatically execute during gdb startup
################################################################
# GDB Text User Interface
ctrl x A    # enters text ui mode
ctrl L      # repaint
ctrl x 1    # switch to normal mode(cli mode )
ctrl x 2    # switch to multi windows mode , asm code , registers etc
################################################################
# A simple Bash script that waits until a process starts and then 
# launches GDB
#!/bin/sh
progstr=$1
progpid=`pgrep -o $progstr`
while [ "$progpid" = "" ]; do
  progpid=`pgrep -o $progstr`
done
gdb -ex continue -p $progpid
################################################################
# Remote GDB setup
On the machine where the application runs :
	If gdbserver is not present , copy it over.
	Start the application.
	Start gdbserver: gdbserver gdbmachine:2345 --attach program

On gdbmachine:
	At the gdb prompt, enter: target remote appmachine:2345

	Sometimes you may have to tunnel over ssh:
	ssh -L 5432:appmachine:2345 user@appmachine

	At the gdb prompt: target remote localhost:5432